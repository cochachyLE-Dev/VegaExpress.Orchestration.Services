name:          VegaExpressProxy
version:       1.2.2
stability:     stable on all operating systems
synopsis:      High-performance Distributed Proxy and Tunneling Solution for TCP
description:   VegaExpressProxy is a minimalistic, cross-platform, transport-layer
               distributed reverse / forward proxy & tunneling solution for TCP
               (RDP, SSH, HTTP(S), (S)FTP, VNC, ...).

copyright:     Copyright Â© 2024 Liiksoft
license:       MIT
license-file:  LICENSE
author:        Luis Eduardo Cochachi Chamorro 
category:      System, Network,
build-type:    Simple
cabal-version: >= 1.6



extra-source-files: res/*.svg
                    res/osx/*.icns
                    res/osx/*.hqx
                    res/win/*.rc
                    res/win/*.bat
                    res/win/*.ico
                    res/win/*.res

flag threaded
    description: use threaded runtime
    default:     True


flag static
    description: enable fully static linking
    default:     False


flag llvm
    description: compile via LLVM
    default:     False



executable VegaExpressProxy
    hs-source-dirs:  src
    main-is:         Main.hs
    buildable:       True
    build-depends:   base       >= 4 && <= 5,
                     bytestring -any,
                     splice     >= 0.6.1
    if os(windows)
      build-depends: network    >= 2.3.0.13
      if arch(i386)
        ghc-options: res\win\VegaExpressProxy.res
      if arch(x86_64)
        ghc-options: res\win\VegaExpressProxy-64.res
    else
      build-depends: network    -any


    ghc-options:     -O2 -Wall -fno-warn-name-shadowing -fno-warn-orphans

    if flag(threaded) && !os(windows) && !arch(arm)
      ghc-options:   -threaded -rtsopts

    if flag(static)
      ghc-options:   -static
      ld-options:    -static -pthread

    if flag(llvm)
      ghc-options:   -fllvm -optlo-O3


--------------------------------------------------------------------------------


   -- CORSIS Build Name Components

    if os(linux)
       cpp-options: -D__OS__="Linux"
    else
       if os(windows)
         cpp-options: -D__OS__="Windows"
       else
         if os(freebsd)
           cpp-options: -D__OS__="FreeBSD"
         else
           if os(openbsd) || os(netbsd)
             cpp-options: -D__OS__="BSD"
           else
             if os(darwin)
               cpp-options: -D__OS__="MacOS"
             else
               if os(solaris)
                 cpp-options: -D__OS__="Solaris"
               else
--                 if os(gnu) || os(hurd)
--                   cpp-options: -D__OS__="HURD"
--                 else
                   cpp-options: -D__OS__="Generic"


    if arch(i386)
       cpp-options: -D__ARCH__="x86"
    else
       if arch(x86_64)
         cpp-options: -D__ARCH__="x86-64"
       else
         if arch(arm)
           cpp-options: -D__ARCH__="ARM"
         else
--           if arch(powerpc)
--             cpp-options: -D__ARCH__="PowerPC"
--           else
--             if arch(powerpc64)
--               cpp-options: -D__ARCH__="PowerPC-64"
--             else
               if arch(sparc)
                 cpp-options: -D__ARCH__="SPARC"
               else
                 if arch(ia64)
                   cpp-options: -D__ARCH__="Itanium-64"
                 else
                   if arch(mips)
                     cpp-options: -D__ARCH__="MIPS"
                   else
                     cpp-options: -D__ARCH__="Unknown"
